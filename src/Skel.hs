-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Abs.Ident -> Result
transIdent x = case x of
  Abs.Ident string -> failure x

transProgram :: Show a => Abs.Program' a -> Result
transProgram x = case x of
  Abs.Program _ topdefs -> failure x

transTopDef :: Show a => Abs.TopDef' a -> Result
transTopDef x = case x of
  Abs.FnDef _ type_ ident args block -> failure x

transArg :: Show a => Abs.Arg' a -> Result
transArg x = case x of
  Abs.VArg _ type_ ident -> failure x
  Abs.RArg _ type_ ident -> failure x

transBlock :: Show a => Abs.Block' a -> Result
transBlock x = case x of
  Abs.Block _ stmts -> failure x

transStmt :: Show a => Abs.Stmt' a -> Result
transStmt x = case x of
  Abs.Empty _ -> failure x
  Abs.BStmt _ block -> failure x
  Abs.Decl _ type_ items -> failure x
  Abs.Ass _ ident expr -> failure x
  Abs.Incr _ ident -> failure x
  Abs.Decr _ ident -> failure x
  Abs.Ret _ expr -> failure x
  Abs.VRet _ -> failure x
  Abs.Cond _ expr stmt -> failure x
  Abs.CondElse _ expr stmt1 stmt2 -> failure x
  Abs.While _ expr stmt -> failure x
  Abs.SExp _ expr -> failure x
  Abs.Break _ -> failure x
  Abs.Continue _ -> failure x
  Abs.ArrayAss _ expr1 expr2 expr3 -> failure x
  Abs.TupleUnpackExpr _ unpackidents expr -> failure x
  Abs.TupleUnpackIdent _ unpackidents ident -> failure x

transItem :: Show a => Abs.Item' a -> Result
transItem x = case x of
  Abs.NoInit _ ident -> failure x
  Abs.Init _ ident expr -> failure x

transUnpackIdent :: Show a => Abs.UnpackIdent' a -> Result
transUnpackIdent x = case x of
  Abs.UnpackIdent _ ident -> failure x

transType :: Show a => Abs.Type' a -> Result
transType x = case x of
  Abs.Int _ -> failure x
  Abs.Str _ -> failure x
  Abs.Bool _ -> failure x
  Abs.Void _ -> failure x
  Abs.Array _ type_ integer -> failure x
  Abs.Tuple _ types -> failure x
  Abs.Fun _ type_ types -> failure x

transExpr :: Show a => Abs.Expr' a -> Result
transExpr x = case x of
  Abs.EArrayVar _ expr1 expr2 -> failure x
  Abs.EVar _ ident -> failure x
  Abs.ELitInt _ integer -> failure x
  Abs.ELitTrue _ -> failure x
  Abs.ELitFalse _ -> failure x
  Abs.EApp _ ident exprs -> failure x
  Abs.EString _ string -> failure x
  Abs.ETuple _ titems -> failure x
  Abs.Neg _ expr -> failure x
  Abs.Not _ expr -> failure x
  Abs.EMul _ expr1 mulop expr2 -> failure x
  Abs.EAdd _ expr1 addop expr2 -> failure x
  Abs.ERel _ expr1 relop expr2 -> failure x
  Abs.EAnd _ expr1 expr2 -> failure x
  Abs.EOr _ expr1 expr2 -> failure x

transTItem :: Show a => Abs.TItem' a -> Result
transTItem x = case x of
  Abs.TItem _ expr -> failure x

transAddOp :: Show a => Abs.AddOp' a -> Result
transAddOp x = case x of
  Abs.Plus _ -> failure x
  Abs.Minus _ -> failure x

transMulOp :: Show a => Abs.MulOp' a -> Result
transMulOp x = case x of
  Abs.Times _ -> failure x
  Abs.Div _ -> failure x
  Abs.Mod _ -> failure x

transRelOp :: Show a => Abs.RelOp' a -> Result
transRelOp x = case x of
  Abs.LTH _ -> failure x
  Abs.LE _ -> failure x
  Abs.GTH _ -> failure x
  Abs.GE _ -> failure x
  Abs.EQU _ -> failure x
  Abs.NE _ -> failure x
